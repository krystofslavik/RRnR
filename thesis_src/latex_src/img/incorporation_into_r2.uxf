<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>800</x>
      <y>150</y>
      <w>190</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>*Handler functions*
--
React on events detected
by the hooks.
Store return values of
nondeterministic calls in
the trace during recording.
Load the values from the
trace during replaying.
transparency=0</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>790</x>
      <y>120</y>
      <w>210</w>
      <h>560</h>
    </coordinates>
    <panel_attributes>RRnR package
--

layer=-1
bg=#ddeeff
transparency=0</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>150</x>
      <y>120</y>
      <w>610</w>
      <h>560</h>
    </coordinates>
    <panel_attributes>Core R with RRnR modifications
--
bg=#ccddff
transparency=0
layer=-2</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>800</x>
      <y>370</y>
      <w>190</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>*C implementation*
--
- do_record()
- do_replay()
--
Initialization, deinitialization
and support of recording
and replaying process.

transparency=0</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>530</x>
      <y>150</y>
      <w>220</w>
      <h>200</h>
    </coordinates>
    <panel_attributes>*Wrappers in RRnR.c*
--
Provide interface between the
hooks and the RRnR package.

For each hook there is a wrapper
function which checks if
appropriate handler is registered
and relays the call if so.
Otherwise they return a neutral
response or do nothing.

transparency=0</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>530</x>
      <y>370</y>
      <w>220</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>*Handler registrators in RRnR.c*
--
Store pointer to a handler
function.
Also provide functions to remove
and restore all the pointers.

transparency=0
layer=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>800</x>
      <y>610</y>
      <w>190</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>*R implementation*
--
Mainly environment
cloning and helper functions.

transparency=0</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>160</x>
      <y>150</y>
      <w>320</w>
      <h>430</h>
    </coordinates>
    <panel_attributes>*C Hooks in core R*
--
*RRnR_before &amp; RRnR_after*
- nondeterministic calls interception
- obtain the return value and pass it to RRnR
- get the value from RRnR and return it instead

*RRnR_eval_before &amp; RRnR_eval_after*
- detect callbacks from C to R

*RRnR_JIT_before &amp; RRnR_JIT_after*
- detect JIT compilation start and end
- pause RRnR during this period

*RRnR_browser_before &amp; RRnR_browser_after*
- detect browser() debugger being active
- ignore calls made inside the browser

*RRnR_stdout_vfprintf*
- monitor printing output, so it can be recorded

*RRnR_error*
- detect C errors, so they can be recorded

*RRnR_trace_state*
- detect if code injected by trace() call is executed

layer=2
transparency=0</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>800</x>
      <y>500</y>
      <w>190</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>*R API*
--
+ record()
+ recordFindBug()
+ recordTrace()
+ replay()


transparency=0</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>470</x>
      <y>150</y>
      <w>80</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
lw=2</panel_attributes>
    <additional_attributes>60.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>740</x>
      <y>150</y>
      <w>80</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
lw=2</panel_attributes>
    <additional_attributes>60.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>740</x>
      <y>370</y>
      <w>80</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
lw=2</panel_attributes>
    <additional_attributes>10.0;10.0;60.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>980</x>
      <y>510</y>
      <w>60</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
lw=2</panel_attributes>
    <additional_attributes>10.0;110.0;40.0;110.0;40.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>980</x>
      <y>370</y>
      <w>60</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
lw=2</panel_attributes>
    <additional_attributes>10.0;10.0;40.0;10.0;40.0;140.0;10.0;140.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>160</x>
      <y>590</y>
      <w>320</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>*R Hooks in core R*
--
*RRnR:::lazyload_before &amp; RRnR:::lazyload_after*
- detect lazyloading start and end
- pause RRnR during this period


layer=2
transparency=0</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>870</x>
      <y>290</y>
      <w>30</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
</panel_attributes>
    <additional_attributes>10.0;80.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>900</x>
      <y>290</y>
      <w>30</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>lt=.&gt;
</panel_attributes>
    <additional_attributes>10.0;80.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>470</x>
      <y>160</y>
      <w>350</w>
      <h>460</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
lw=2</panel_attributes>
    <additional_attributes>330.0;10.0;300.0;10.0;300.0;200.0;30.0;200.0;30.0;440.0;10.0;440.0</additional_attributes>
  </element>
</diagram>
